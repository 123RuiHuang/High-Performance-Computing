#include "MatrixMultiply.hpp"#include <exception>#include <boost/numeric/ublas/matrix.hpp>#include <boost/numeric/ublas/matrix_proxy.hpp>#include <numeric>scottgs::MatrixMultiply::MatrixMultiply() {	;}scottgs::MatrixMultiply::~MatrixMultiply(){	;}scottgs::FloatMatrix scottgs::MatrixMultiply::operator()(const scottgs::FloatMatrix& lhs, const scottgs::FloatMatrix& rhs) const{		if (lhs.size2() != rhs.size1())		throw std::logic_error("matrix incompatible lhs.size2() != rhs.size1()");	scottgs::FloatMatrix result(lhs.size1(),rhs.size2());                const int leftRow = lhs.size1();  const int leftColumn = lhs.size2();  const int rightRow = rhs.size1();  const int rightColumn = rhs.size2();  float leftArray[leftRow][leftColumn],rightArray[rightRow][rightColumn];  float tempResult[leftRow][rightColumn];  int i,j,k;    for(i = 0; i < leftRow; i++) {    for(j = 0; j < leftColumn; j++) {      leftArray[i][j] = lhs(i,j);    }  }  for(i = 0; i < rightRow; i++) {    for(j = 0; j < rightColumn; j++) {      rightArray[i][j] = rhs(i,j);    }  }  for(i = 0; i < leftRow;i++) {    for(j = 0; j < rightColumn; j++) {      tempResult[i][j] = 0;    }  }  float *left = *leftArray; float *right = *rightArray; float *temp = *tempResult; float *pointer1 = temp - rightColumn; for(i = 0; i < leftRow; i++) {        pointer1 += rightColumn;        for(k = 0; k < leftColumn; k++) {        register float s = *(left + i * leftColumn +k);        register float *pointer2 = right + k * rightColumn;        for(j = 0; j < rightColumn; j++) {             *(pointer1+j) += s *  *(pointer2 + j); // tempResult[i][j] += s * rightArray[k][j]        }          }      }   for(i =0; i < leftRow;i++) {    for(j = 0; j < rightColumn; j++) {      result(i,j) = tempResult[i][j];    }  } 	// YOUR ALGORIHM WITH COMMENTS GOES HERE:	return result;}scottgs::FloatMatrix scottgs::MatrixMultiply::multiply(const scottgs::FloatMatrix& lhs, const scottgs::FloatMatrix& rhs) const{	// Verify acceptable dimensions	if (lhs.size2() != rhs.size1())		throw std::logic_error("matrix incompatible lhs.size2() != rhs.size1()");	return boost::numeric::ublas::prod(lhs,rhs);}